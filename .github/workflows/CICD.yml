name: CICD

on:
  push:
    branches: ["test/Zero-Downtime"]
  pull_request:
    branches: ["test/Zero-Downtime"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Gradle
        uses: gradle/wrapper-validation-action@v1
        with:
          gradle-version: '8.0'  
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
          
      - name: Docker run
        run: |
          sudo docker run -d --name daengdaeng -p 8080:8080 --net host \
            -e MYSQL_PWD=${{secrets.MYSQL_PWD}} \
            -e SPRING_PROFILES_ACTIVE=default \
            -e GOOGLE_OAUTH_ID=${{secrets.GOOGLE_OAUTH_ID}} \
            -e GOOGLE_OAUTH_SECRET=${{secrets.GOOGLE_OAUTH_SECRET}} \
            -e KAKAO_OAUTH_ID=${{secrets.KAKAO_OAUTH_ID}} \
            -e KAKAO_OAUTH_SECRET=${{secrets.KAKAO_OAUTH_SECRET}} \
            -e KAKAO_REST_API_KEY=${{secrets.KAKAO_REST_API_KEY}} \
            -e MYSQL_DOMAIN=${{secrets.MYSQL_DOMAIN}} \
            -e REDIS_DOMAIN=${{secrets.REDIS_DOMAIN}} \
            -e REDIS_PWD=${{secrets.REDIS_PWD}} \
            -e SECURITY_SECRET=${{secrets.SECURITY_SECRET}} \
            -e DOMAIN=${{secrets.EC2_DNS_ADDRESS}} \
            -e AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY_ID}} \
            -e AWS_SECRET_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} \
            -e AWS_S3_BUCKET=${{secrets.AWS_S3_BUCKET}} \
            -e AWS_S3_URL=${{secrets.AWS_S3_URL}} \
            -e OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}} \
            -e FRONTEND_URL=${{secrets.FRONTEND_URL}} \
            -e TEST=false \
            -e HOST=${{secrets.HOST}} \
            975049923363.dkr.ecr.ap-northeast-2.amazonaws.com/daeng-daeng-ecr:latest

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
      
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
