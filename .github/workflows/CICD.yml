name: CICD

on:
  push:
    branches: ["test/Zero-Downtime"]
  pull_request:
    branches: ["test/Zero-Downtime"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'


      
      - name: Install Gradle
        uses: gradle/wrapper-validation-action@v1
        with:
          gradle-version: '8.0'
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_V2 }}
          password: ${{ secrets.DOCKERHUB_TOKEN_V2 }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME_V2 }}/live_server .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME_V2 }}/live_server:latest

    
                    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
              
      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_V2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_V2 }}
          aws-region: 'ap-northeast-2'


      - name: Add GitHub Actions IP 22
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID_V2 }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Add GitHub Actions IP 80
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID_V2 }} \
              --protocol tcp \
              --port 80 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
        
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
          
      - name: Deploy Docker Compose with .env file
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
     
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            echo "MYSQL_PWD_V2=${{ secrets.MYSQL_PWD_V2 }}" > .env
            echo "GOOGLE_OAUTH_ID=${{ secrets.GOOGLE_OAUTH_ID }}" >> .env
            echo "GOOGLE_OAUTH_SECRET=${{ secrets.GOOGLE_OAUTH_SECRET }}" >> .env
            echo "KAKAO_OAUTH_ID=${{ secrets.KAKAO_OAUTH_ID }}" >> .env
            echo "KAKAO_OAUTH_SECRET=${{ secrets.KAKAO_OAUTH_SECRET }}" >> .env
            echo "KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" >> .env
            echo "MYSQL_DOMAIN_V2=${{ secrets.MYSQL_DOMAIN_V2 }}" >> .env
            echo "REDIS_DOMAIN_V2=${{ secrets.REDIS_DOMAIN_V2 }}" >> .env
            echo "REDIS_PWD_V2=${{ secrets.REDIS_PWD_V2 }}" >> .env
            echo "SECURITY_SECRET=${{ secrets.SECURITY_SECRET }}" >> .env
            echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
            echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
            echo "AWS_S3_URL=${{ secrets.AWS_S3_URL }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
            echo "TEST=${{ secrets.TEST }}" >> .env
            echo "EC2_DNS_ADDRESS=${{ secrets.EC2_DNS_ADDRESS }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "PROFILES=${{ GITHUB_ENV }}" >> .env
            echo "ENV=${{ GITHUB_ENV }}" >> .env
            sudo docker-compose -f /home/ubuntu/docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d





      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{ env.STOPPED_PORT }}/env
          max-attempts: 10
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload' 

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{ env.CURRENT_UPSTREAM }}
            sudo docker rm ${{ env.CURRENT_UPSTREAM }}

      - name: Remove GitHub Actions IP
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID_V2 }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
